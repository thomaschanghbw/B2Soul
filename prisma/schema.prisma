// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // https://github.com/pgvector/pgvector-node?tab=readme-ov-file#prisma
  extensions = [vector]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name          String
  email         String          @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  sessions      Session[]
  Companies     CompanyMember[]
  LoginCodes    LoginCode[]

  Project Project[]
}

model VerificationToken {
  /// prisma-lint-ignore-model require-field
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  publicName String
  slug       String @unique

  members CompanyMember[]

  Project Project[]
}

// Explicit relationship table for Company/User many-to-many relationship
model CompanyMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  userId    String
  companyId String

  @@unique([companyId, userId])
}

model LoginCode {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  codeHash  String    @unique
  verified  DateTime?
  expires   DateTime
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name   String
  status ProjectStatus @default(ACTIVE)

  createdBy       User        @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  company         Company     @relation(fields: [companyId], references: [id])
  companyId       String
  ragProvider     RAGProvider

  documents ProjectDocument[]

  ProjectGenAISections ProjectGenAISection[]

  GenAIReportSections GenAIReportSection[]
  ParsedDocuments     ParsedDocument[]
}

model ProjectDocument {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name                  String
  // TODO: Add status
  // status                RAGDocumentStatus
  s3Key                 String
  ragProviderDocumentId String
  project               Project @relation(fields: [projectId], references: [id])
  projectId             String

  ChatThreads ChatMessageThread[]
}

enum ParsedDocumentType {
  IMAGE
  PDF
}

model ParsedDocument {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Project   Project @relation(fields: [projectId], references: [id])
  projectId String

  parsedDocument Json
  documentType   ParsedDocumentType
  documentName   String
  s3Key          String
  parserResultId String // This is the id returned by whatever parser we use (e.g. reducto, etc)

  @@index([projectId])
}

enum RAGProvider {
  // Bedrock
  // Cohere
  Ragie
  Carbon
}

enum RAGDocumentStatus {
  READY
  PROCESSING
  FAILED
}

model ProjectGenAISection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  project       Project @relation(fields: [projectId], references: [id])
  projectId     String
  prompt        String
  response      String
  referenceText String?
}

model GenAIReportSection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  sectionHeading String
  order          Decimal

  subSections GenAIReportSubsection[]

  @@unique([projectId, order], name: "unique_order_per_project")
  @@index([projectId, order], name: "order_by_project")
}

model GenAIReportSubsection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Section           GenAIReportSection     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId         String
  subSectionHeading String
  Paragraphs        GenAIReportParagraph[]

  order Decimal

  @@unique([sectionId, order], name: "unique_order_per_section")
  @@index([sectionId, order], name: "order_by_section")
}

model GenAIReportParagraph {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  SubSection   GenAIReportSubsection @relation(fields: [subSectionId], references: [id], onDelete: Cascade)
  subSectionId String
  paragraph    String                @db.Text

  order Decimal

  @@unique([subSectionId, order], name: "unique_order_per_sub_section")
  @@index([subSectionId, order], name: "order_by_sub_section")
}

// Add this enum at the end of the file
enum ProjectStatus {
  ACTIVE
  ARCHIVED
}

model ChatMessageRow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role     String
  content  String            @db.Text
  Thread   ChatMessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  @@index([threadId])
}

model ChatMessageThread {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  messages ChatMessageRow[]

  Document   ProjectDocument @relation(fields: [documentId], references: [id])
  documentId String

  @@index([documentId])
}

model VectorizedItem {
  /// prisma-lint-ignore-model require-field
  /// prisma-lint-ignore-model require-field-type
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collection  String? // Quran, Torah, Pali Canon, Bible, etc
  book        String? // surah, chapter, etc
  verse       String? // ayah, verse, etc
  translation String? // King James Version, etc

  content       String                       @db.Text
  embedding     Unsupported("vector(3072)")?
  embedding_512 Unsupported("vector(512)")?
}
